/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include "zmk-helpers/helper.h"
#include "includes/cornix54.h"
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>

#define BASE    0
#define NUM     1
#define FUNC    2
#define MOUSE   3
#define SCUT    4
#define SYS     5
#define NONE    6
#define DEBUG   7

#define QUICK_TAP_MS 175
#define TAPPING_TERM_MS 280
#define REQUIRE_PRIOR_IDLE_MS 150

#define COMBO_TERM_FAST 18
#define COMBO_TERM_SLOW 30

#define COMBO_IDLE_FAST 150
#define COMBO_IDLE_SLOW 50

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1500  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10
#include <dt-bindings/zmk/pointing.h>

#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2




&sk {
  release-after-ms = <900>;
  quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
  ignore-modifiers;
};

&lt {
  flavor = "balanced";
  tapping-term-ms = <200>;
  quick-tap-ms = <QUICK_TAP_MS>;
};
/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;                // repeat on tap-into-hold
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_R THUMBS>;
            hold-trigger-on-release;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <TAPPING_TERM_MS>;
            quick-tap-ms = <QUICK_TAP_MS>;
            require-prior-idle-ms = <REQUIRE_PRIOR_IDLE_MS>;
            hold-trigger-key-positions = <KEYS_L THUMBS>;
            hold-trigger-on-release;
        };
        smart_shift: smart_shift {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&caps_word>, <&sk>;
            display-name = "Layer-Tap";
        };
        swap: swapper {
            compatible = "zmk,behavior-tri-state";
            label = "SWAPPER";
            #binding-cells = <0>;
            bindings = <&kt LALT>, <&kp TAB>, <&kt LALT>;
            ignored-key-positions = <1>;
        };
        double_layer: double_layer {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <TAPPING_TERM_MS>;
            bindings = <&to>, <&to>;
            display-name = "Double-Layer";
        };


        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp COMMA>, <&kp SEMICOLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp DOT>, <&kp COLON>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp QMARK>, <&kp EXCL>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        lpar_lt: lpar_lt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp LPAR>, <&kp LT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
        rpar_gt: rpar_gt {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp RPAR>, <&kp GT>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };
    };

    combos {
        compatible = "zmk,combos";

        cb_copy {
            bindings = <&kp LC(INS)>;
            key-positions = <LB2 LB3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        cb_paste {
            bindings = <&kp LS(INS)>;
            key-positions = <LB1 LB2>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        cb_cut {
            bindings = <&kp LC(X)>;
            key-positions = <LB1 LB3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        cb_pageup {
            bindings = <&kp PG_UP>;
            key-positions = <LT2 LT3>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        cb_pgdown {
            bindings = <&kp PG_DN>;
            key-positions = <LT1 LT2>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

        cb_sys {
            bindings = <&mo SYS>;
            key-positions = <LH1 LH2>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };


        /* symbol combos */
        cb_at {
            bindings = <&kp AT>;
            key-positions = <LT3 LM3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_hash {
            bindings = <&kp HASH>;
            key-positions = <LT2 LM2>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_dllr {
            bindings = <&kp DLLR>;
            key-positions = <LT1 LM1>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_prcnt {
            bindings = <&kp PRCNT>;
            key-positions = <LT0 LM0>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        cb_grave {
            bindings = <&kp GRAVE>;
            key-positions = <LM3 LB3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_bslh {
            bindings = <&kp BSLH>;
            key-positions = <LM2 LB2>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_equal {
            bindings = <&kp EQUAL>;
            key-positions = <LM1 LB1>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_tilde {
            bindings = <&kp TILDE>;
            key-positions = <LM0 LB0>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        cb_caret {
            bindings = <&kp CARET>;
            key-positions = <RT0 RM0>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_plus {
            bindings = <&kp PLUS>;
            key-positions = <RT1 RM1>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_star {
            bindings = <&kp STAR>;
            key-positions = <RT2 RM2>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_amps {
            bindings = <&kp AMPS>;
            key-positions = <RT3 RM3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };

        cb_under {
            bindings = <&kp UNDER>;
            key-positions = <RM0 RB0>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_minus {
            bindings = <&kp MINUS>;
            key-positions = <RM1 RB1>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_fslh {
            bindings = <&kp FSLH>;
            key-positions = <RM2 RB2>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };
        cb_pipe {
            bindings = <&kp PIPE>;
            key-positions = <RM3 RB3>;
            layers = <BASE NUM>;
            timeout-ms = <COMBO_TERM_SLOW>;
            require-prior-idle-ms = <COMBO_IDLE_SLOW>;
        };


        cb_lpar_lt {
            bindings = <&lpar_lt>;
            key-positions = <RT1 RT2>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        cb_rpar_gt {
            bindings = <&rpar_gt>;
            key-positions = <RT2 RT3>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        cb_lbkt {
            bindings = <&kp LBKT>;
            key-positions = <RB1 RB2>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };
        cb_rbkt {
            bindings = <&kp RBKT>;
            key-positions = <RB2 RB3>;
            layers = <BASE>;
            timeout-ms = <COMBO_TERM_FAST>;
            require-prior-idle-ms = <COMBO_IDLE_FAST>;
        };

    };

    keymap {
        compatible = "zmk,keymap";
        default_layer {
                        display-name = "Base";
                        bindings = <
   &double_layer  FUNC NUM  &kp Q       &kp W       &kp E             &kp R         &kp T                               &kp Y                &kp U              &kp I                &kp O        &kp P          &to MOUSE
   &kp LG(SPACE)            &hml LGUI A &hml LALT S &hml LCTRL D      &hml LSHIFT F &kp G                               &kp H                &hmr RSHIFT J      &hmr RCTRL K         &hmr RALT L  &hmr RGUI SQT  &swap
   &smart_shift 0 LSHIFT    &kp Z       &kp X       &kp C             &kp V         &kp B          &kp C_MUTE  &kp C_PP &kp N                &kp M              &comma_morph         &dot_morph   &qexcl         &smart_shift 0 LSHIFT
   &none                    &none       &none       &lt SCUT ESCAPE   &lt NUM SPACE &lt FUNC TAB                        &lt MOUSE RET        &lt SCUT BACKSPACE &lt NUM DELETE     &none        &none          &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;
                };

    num_layer {
                        display-name = "Num";
                        bindings = <
   &to  BASE  &kp N1           &kp N2          &kp N3           &kp N4            &kp N5                            &kp PG_UP   &kp HOME   &kp UP    &kp END             &kp DEL     &kp C_VOLUME_UP
   &kp DOT    &hml LGUI N6     &hml LALT N7    &hml LCTRL N8    &hml LSHIFT N9    &kp N0                            &kp PG_DN   &kp LEFT   &kp DOWN  &kp RIGHT           &kp CAPS    &kp C_VOLUME_DOWN
   &kp LSHFT  &kp PLUS         &kp MINUS       &kp KP_MULTIPLY  &kp FSLH          &kp EQUAL &kp C_MUTE  &kp C_PP    &kp INS     &kp GRAVE  &kp PSCRN &kp PAUSE_BREAK     &kp KP_NUM  &kp C_MUTE
   &trans     &trans           &trans          &trans           &trans            &trans                            &trans      &trans     &trans    &trans              &trans      &trans
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;

                };
        func_layer {
                        display-name = "Func";
                        bindings = <
   &to BASE    &kp F1         &kp F2         &kp F3          &kp F4            &kp F5                           &kp F18      &kp F19     &kp F20     &kp F21     &kp F22     &trans
   &kp F11     &hml LGUI F6   &hml LALT F7   &hml LCTRL F8   &hml LSHIFT F9    &kp F10                          &kp F23      &kp LSHIFT  &kp LCTRL   &kp LALT    &kp LGUI    &trans
   &kp F12     &kp F13        &kp F14        &kp F15         &kp F16           &kp F23  &kp C_MUTE  &kp C_PP    &kp F24      &trans      &trans      &trans      &trans      &trans
   &none       &none          &none          &trans          &trans            &trans                           &trans       &trans      &trans      &none       &none       &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;
                };


    mouse_layer {
                        display-name = "Mouse";
                        bindings = <
   &to  BASE        &none        &bt BT_SEL 1    &msc SCRL_UP        &none                  &none                           &msc SCRL_UP     &mkp MB4        &mmv MOVE_UP     &mkp MB5        &msc SCRL_LEFT  &to  BASE
   &none            &none        &msc SCRL_LEFT  &msc SCRL_DOWN      &msc SCRL_RIGHT        &none                           &msc SCRL_DOWN   &mmv MOVE_LEFT  &mmv MOVE_DOWN   &mmv MOVE_RIGHT &msc SCRL_RIGHT &none
   &none            &none        &none           &none               &none                  &none     &kp C_MUTE  &kp C_PP  &none            &mkp MCLK       &mkp LCLK        &mkp RCLK       &none           &none
   &none            &none        &none           &mkp MCLK           &mkp LCLK              &mkp RCLK                       &none            &none           &none            &none           &none           &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;
        };
    scut_layer {
                        display-name = "Scut";
                        bindings = <
   &to  BASE        &none        &none           &none               &none                  &none                              &none            &kp C_MUTE  &kp C_VOLUME_UP      &kp C_PP    &none    &to  BASE
   &none            &none        &none           &none               &none                  &none                              &none            &kp C_PREV  &kp C_VOLUME_DOWN    &kp C_NEXT  &none    &none
   &none            &none        &none           &none               &none                  &none   &kp C_MUTE  &kp C_PP       &none            &none       &none                &none       &none    &none
   &none            &none        &none           &none               &none                  &none                              &none            &none       &none                &none       &none    &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;

                };
    sys_layer {
                        display-name = "Sys";
                        bindings = <
   &to  BASE        &bt BT_SEL 0 &bt BT_SEL 1    &bt BT_SEL 2        &bt BT_SEL 3           &bt BT_SEL 4                              &none            &kp C_MUTE  &kp C_VOLUME_UP      &kp C_PP    &none    &to  BASE
   &bt  BT_CLR      &none        &none           &none               &none                  &none                                     &none            &kp C_PREV  &kp C_VOLUME_DOWN    &kp C_NEXT  &none    &none
   &bt  BT_CLR_ALL  &none        &none           &none               &none                  &none   &kp C_MUTE  &kp C_PP              &none            &none       &none                &none       &none    &none
   &none            &none        &none           &none               &none                  &none                                     &none            &none       &none                &none       &none    &none
                        >;
                        sensor-bindings = <&inc_dec_kp C_VOL_UP C_VOL_DN &inc_dec_kp C_PREV C_NEXT>;

                };
    };
};
